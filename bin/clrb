#!/usr/bin/env ruby

require 'stringio'
require 'json'
require 'thread'
require 'citrus'
require 'optparse'
require 'combinator_logic'

OptionParser.new do |opts|

  opts.banner = "Usage: cl [options] FILE"
  
  opts.on( "--timeout N", Float,
           "Quit execution after N seconds." ) do |n|
    $timeout = n
  end

  opts.on( "--[no-]spans",
           "Get span information for se-mode." ) do |s|
    $spans = s
  end

  opts.on( "-e EXPR", "--eval EXPR",
           "Evaluates given expression." ) do |e|
    $evalme = e
  end
  
end.parse!

begin
  $stdout_ = $stdout

  if $timeout
    Thread.new do
      sleep $timeout
      $stdout_.puts "Timed out after #$timeout seconds."
      exit 1
    end
  end
  
  if $evalme
    $stdout = StringIO.new
    CombinatorLogic::CLFile.from_source($evalme).value
    $stdout_.puts( $spans ?
                     { 'message' => $stdout.string }.to_json :
                     $stdout.string )
  else
    f = CombinatorLogic::CLFile.new ARGV.first
    $spans ? (puts f.to_json) : f.value
  end

rescue => e

  $stdout = $stdout_
  
  if $spans
    puts( {'error' => e.message}.to_json )
  else
    raise e
  end
  
end
